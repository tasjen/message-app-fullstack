version: "3"

vars:
  EC2_IPv4: 52.76.87.23
  MIGRATE: migrate -path ./services/chatdb/migrations/ -database $POSTGRESQL_URI

dotenv: ["./services/chat/.env.dev", "./services/chat/.env.prod"]

tasks:
  dev:
    cmds:
      - docker compose -f docker-compose.dev.yml up {{.ARGS}}
    env:
      HOST: localhost:3000
      MY_UID:
        sh: id -u
      MY_GID:
        sh: id -g
  prod:
    cmds:
      - docker compose -f docker-compose.prod.yml up {{.ARGS}}
    env:
      HOST:
        tasjen.pro
        # if no DNS, use AWS default public DNS as HOST
        # sh: >
        #   curl -H "X-aws-ec2-metadata-token: {{.TOKEN}}"
        #   "http://169.254.169.254/latest/meta-data/public-hostname"
    vars:
      TOKEN:
        sh: >
          curl -X PUT "http://169.254.169.254/latest/api/token"
          -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"
  down:
    cmds:
      - |
        DEV_COMPOSE=docker-compose.dev.yml
        PROD_COMPOSE=docker-compose.prod.yml
        if [ -e $DEV_COMPOSE ]
        then
          docker compose -f $DEV_COMPOSE down {{.ARGS}}
        else
          docker compose -f $PROD_COMPOSE down {{.ARGS}}
        fi
    silent: true
  pgadmin:
    cmds:
      - |
        DEV_COMPOSE=docker-compose.dev.yml
        PROD_COMPOSE=docker-compose.prod.yml
        if [ -e $DEV_COMPOSE ]
        then
          docker compose -f $DEV_COMPOSE up pgadmin
        else
          docker compose -f $PROD_COMPOSE up pgadmin
        fi
    silent: true
  # prod only (for dev, change hostname in services/chat/.env.dev from 'chatdb' to 'localhost')
  migrate-create:
    cmds:
      - migrate create -seq -ext=.sql -dir=./services/chatdb/migrations {{.LABEL}}
  migrate-version:
    cmds:
      - "{{.MIGRATE}} version"
    silent: true
  migrate-up:
    cmds:
      - "{{.MIGRATE}} -verbose up"
    silent: true
  migrate-goto:
    cmds:
      - "{{.MIGRATE}} -verbose goto {{.VERSION}}"
    silent: true
  migrate-force:
    cmds:
      - "{{.MIGRATE}} -verbose force {{.VERSION}}"
    silent: true

  # dev only
  ssh: # ssh to an ec2 instance
    cmds:
      - ssh -i messenjo.pem ec2-user@{{.EC2_IPv4}}
  push: # pushes all source code required to start a production app to an ec2 instance
    cmds:
      - >
        zip -qr messenjo-prod.zip services Taskfile.yml docker-compose.prod.yml
        -x "*node_modules*" "*tmp*" "*gen/*" "*.dev*" "*chatdb/data/*"
      - >
        scp -i messenjo.pem messenjo-prod.zip
        ec2-user@{{.EC2_IPv4}}:/home/ec2-user/
      - rm messenjo-prod.zip
    silent: true

  # prod only
  cert:
    cmds:
      - docker compose -f docker-compose.prod.yml up certbot
      - task: down
    silent: true
